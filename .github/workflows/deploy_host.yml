name: Login into host machine, build and start the app's daemon
on:
  push:
    branches:
      - prd-host

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: cd frontend && npm ci
      - run: cd frontend && npm run check --if-present
      - run: cd frontend && npm run test:static --if-present
      - run: cd frontend && npm test --if-present
      - run: cd frontend && sudo npm run build --if-present

  build-django:
    runs-on: ubuntu-latest
    needs: build-frontend
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]
    steps:
      - uses: actions/checkout@v2
      - name: Setup Memcache
        run: sudo apt-get install libmemcached-dev
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Dependencies
        run: |

          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Tests
        env:
          TEST: 1
        run: |
          python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: build-django
    steps:
      - uses: actions/checkout@master
      - name: copy repo to host machine
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          source: "requirements.txt,api,backend,config,core,frontend,manage.py,drt.ini"
          target: "app_to_deploy"

      - name: build the backend, the frontend and start the app's daemon
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script: |
            echo -e "======================== HOST DEPLOY STARTED ========================\n"

            cd app_to_deploy
            echo -e "~~~~~~~~~~~~~~~~~~~~~~~~ Changed directory into app_to_deploy ~~~~~~~~~~~~~~~~~~~~~~~~\n"

            cd frontend
            echo -e "~~~~~~~~~~~~~~~~~~~~~~~~ Changed directory into frontend ~~~~~~~~~~~~~~~~~~~~~~~~\n"

            npm ci 
            echo -e "~~~~~~~~~~~~~~~~~~~~~~~~ Installed javascript dependencies successfully ~~~~~~~~~~~~~~~~~~~~~~~~\n"

            rm .env
            touch .env 
            echo 'NODE_ENV=production' >> .env 
            echo 'AUTH_TOKEN='${{ secrets.AUTH_KEY }} >> .env 
            echo 'GTAG_ID='${{ secrets.GTAG_ID }} >> .env  

            npx webpack
            echo -e "~~~~~~~~~~~~~~~~~~~~~~~~ Built frontend successfully ~~~~~~~~~~~~~~~~~~~~~~~~\n"

            cd ..
            rm .env
            touch .env
            echo 'MODE=production' >> .env
            echo 'SECRET_KEY='${{ secrets.SECRET_KEY }} >> .env
            echo 'CDN_NAME='${{ secrets.CDN_NAME }} >> .env
            echo 'CDN_API_KEY='${{ secrets.CDN_API_KEY }} >> .env
            echo 'CDN_API_SECRET='${{ secrets.CDN_API_SECRET }} >> .env
            echo 'DB_HOST='${{ secrets.DB_HOST }} >> .env 
            echo 'DB_NAME='${{ secrets.NAME }} >> .env 
            echo 'DB_USER=${{ secrets.DB_USER }}' >> .env 
            echo 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' >> .env 
            echo 'SMTP_HOST_USER='${{ secrets.SMTP_HOST_USER }} >> .env
            echo 'SMTP_HOST_PASSWORD='${{ secrets.SMTP_HOST_PASSWORD }} >> .env 

            cd ..
            cp -rf --no-target-directory app_to_deploy app
            echo -e "~~~~~~~~~~~~~~~~~~~~~~~~ Replaced current running code with new one ~~~~~~~~~~~~~~~~~~~~~~~~\n"

            cd app
            python3 -m pip install -r requirements.txt
            echo -e "~~~~~~~~~~~~~~~~~~~~~~~~ Installed python requirements successfully ~~~~~~~~~~~~~~~~~~~~~~~~\n"

            python3 manage.py migrate && python3 manage.py collectstatic --no-input && python3 manage.py clearcache

            echo ${{ secrets.SSH_PASSWORD }} | sudo -S rm /etc/supervisord.d/drt.ini
            echo ${{ secrets.SSH_PASSWORD }} | sudo -S cp ./drt.ini /etc/supervisord.d/
            echo ${{ secrets.SSH_PASSWORD }} | sudo -S supervisorctl update
            echo ${{ secrets.SSH_PASSWORD }} | sudo -S supervisorctl reread
            echo ${{ secrets.SSH_PASSWORD }} | sudo -S supervisorctl status drt

            rm .env
            echo -e "~~~~~~~~~~~~~~~~~~~~~~~~ Gunicorn daemon is up ~~~~~~~~~~~~~~~~~~~~~~~~\n"
            echo -e "======================== HOST DEPLOY IS DONE ========================\n"
